function DiscFix1 = import_preptxt(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DISCFIX1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   DISCFIX1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   DiscFix1 = importfile('Disc_Fix_1.txt', 2, 65);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/12/05 11:25:00

%% Initialize variables.
if nargin<=2
    startRow = 2;
    endRow = 65;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: categorical (%C)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: categorical (%C)
%   column9: double (%f)
%	column10: categorical (%C)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%8f%10f%10C%10f%10f%8f%10f%20C%8f%15C%10f%8f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
DiscFix1 = table(dataArray{1:end-1}, 'VariableNames', {'num','trialt','cue','codCUE','delay1','dis','codDIS','DIS','delay','TA','RcodTA','Rb','pISIrand'});

