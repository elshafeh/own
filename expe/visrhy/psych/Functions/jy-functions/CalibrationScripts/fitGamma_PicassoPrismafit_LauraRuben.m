clear allclose allcomputer = 'FridaBeh1'; %'PicassoPrismafit';% Calibration luminance values taken by Laura Geurts and Ruben van Bergen on% August 7, 2017, room lights off; % [255 255 255] = (887+996)/2 = 914.5, check: 112+738+130.6 = 980.6,	black = (0.71+0.91)/2% luminances measured using photometer (descending + ascending order, 1 run, 2 measures per level)% lum1 = [		118 97 77.5 59.6 42.0 25.5 12.1 3.6 0.91 ;... %r%                  785 641 495 364 252 144 60.0 12.2 0.91;... %g%                 67.9 62.1 53.0 43.3 31.0 18.2 8.41 2.4 0.91]'; %b% % lum2 = [		0.71 3.39 10.8 24.7 40.7 55.0 70.3 83.4 106;... %r%                 0.71 8.34 44.7 108 197 271 390 507 691;... %g%                 0.71 1.64 6.17 15.1 25.8 34.3 45 58.3 62.7]'; %blum1 = [    10.8 6.46 3.31 1.32 0.24 0 0 0 0;... % r            46.0 27.3 14.0 5.36 1.08 0 0 0 0;... % g            6.9 4.27 2.30 0.94 0.25 0 0 0 0]'; %blum2 = [    0 0 0 0 0.24 1.28 3.32 6.53 11;... %r            0 0 0 0 1.03 5.33 13.39 27.6 46.5;...%g            0 0 0 0.01 0.21 0.94 2.28 4.3 6.89]'; %blum = (flipud(lum1) + lum2)/2;voltage = kron([1 1 1], [0,32,64,96,128,160,192,224,255]'); 		% i.e. color number values, should be in ascending ordernormVolt = (voltage-voltage(1))/ (max(voltage(:)) - voltage(1));		% normalize to range 0 to 1maxLum = max(lum);dacsize = 8;% threshold = min(lum)/max(lum)figurecolor = 'rgb';for n = 1:3	normLum(:,n) = (lum(:,n) - min(lum(:,n))) / (max(lum(:,n)) - min(lum(:,n)));			% normalize to range 0 to 1		% calculate gamma using threshold starting normVolt (leads to better fits) (i.e. MonitorGammaError)    a = normVolt(:,n);    b = normLum(:,n);    params=fminsearch(@(x) MonitorGammaError(x,a,b) ,[.1 2]);% 	params=fminsearch('MonitorGammaError',[.1 2],[],[],normVolt(:,n), normLum(:,n));	threshold(n) = params(1);	gamma(n) = params(2);	fit(:,n) = MonitorGamma(normVolt(:,n),params(1),params(2));			% fit of specific voltages using gamma power function	gamTable(:,n) = MonitorGamma([0:255]'/255,params(1),params(2));		% table of fitted gamma values 	mse(n) = mean( (normLum(:,n) - fit(:,n)).^2);		plot(normVolt(:,n), normLum(:,n), [color(n) '*']);	hold on;	plot(normVolt(:,n), fit(:,n), [color(n) '-']);	hold on;		endgamInverse = mkInvGammaTable(gamTable,256*4);	% create inverse gamma table, note, 1st entry is 0 0 0, oversample gamma table												% very similar to InvertGammaTable.m in psychophysical toolbox except that [0 0 0]												% is first entry (rather than starting at much higher color number)% cd('Calibration')                                                dacsize = 8;												calibrationFile = ['calib_' date '.mat'];eval(['save ' calibrationFile ' lum voltage normLum normVolt gamma threshold gamTable gamInverse mse computer maxLum dacsize']);% eval(['save calibrationNameFile calibrationFile']);% Function MonitorGamma uses gamma function y = x^g  where% x = input normVolt, y = normLuminance, % x0 = threshold normVolt before normLuminance starts to increase% fmins minimizes function MonitorGammaError (psychophysics toolbox) % which calculates mean squared error between % actual normLuminances as a function of normVolt and a gamma function specified in MonitorGamma% default starting values threshold = .1, gamma = 2% params(1) = threshold, params(2) = gamma		% calculate gamma using no threshold level for starting normVolt (leads to poorer fits) (i.e. MonitorGammaErrorFT)% params=fmins('MonitorGammaErrorFT',[.1 2],[],[],normVolt, normLum)% gamma = params(2)% fit = normVolt.^gamma% mse = mean( (normLum- fit).^2)% [fitvals] = FitGamma(255*normVolt',normLum',(0:255)','1');   % couldn't get this function to workfigure, plot(gamInverse)